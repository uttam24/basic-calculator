{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","valueA","setValueA","valueB","setValueB","operations","setOperations","result","setResult","className","type","value","onChange","e","target","onClick","parseInt","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA2DeA,EAxDL,WAAM,IAAD,EACeC,mBAAS,GADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGuBJ,mBAAS,KAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIeN,mBAAS,GAJxB,mBAINO,EAJM,KAIEC,EAJF,KAoCb,OACE,sBAAKC,UAAU,MAAf,UACA,mDACE,6BAAKF,IACH,gCACA,uBAAOG,KAAK,OAAOC,MAAOV,EAAQW,SAdjB,SAACC,GACtBX,EAAUW,EAAEC,OAAOH,UAcf,uBAAOD,KAAK,OAAOC,MAAOR,EAAQS,SAXjB,SAACC,GACtBT,EAAUS,EAAEC,OAAOH,UAWf,wBAAQI,QArCM,WACA,MAAfV,EACDG,EAAUQ,SAASf,GAAUe,SAASb,IAEjB,MAAfE,EACNG,EAAUQ,SAASf,GAAUe,SAASb,IAEjB,MAAfE,EACNG,EAAUQ,SAASf,GAAUe,SAASb,IAEjB,MAAfE,EACNG,EAAUQ,SAASf,GAAUe,SAASb,IAKtCc,MAAM,sBAqB2BR,UAAU,YAAzC,uBAEA,+BAAOJ,IACP,sBAAKI,UAAU,iBAAf,UACA,wBAAQM,QAAS,kBAAIT,EAAc,MAAnC,eACA,wBAAQS,QAAS,kBAAIT,EAAc,MAAnC,eACA,wBAAQS,QAAS,kBAAIT,EAAc,MAAnC,eACA,wBAAQS,QAAS,kBAAIT,EAAc,MAAnC,sBCzCOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4301b72d.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nconst App=()=> {\n  const [valueA, setValueA] = useState(0);\n  const [valueB, setValueB] = useState(0);\n  const [operations, setOperations] = useState('+');\n  const [result, setResult] = useState(0);\n\n  const handleSubmit =()=>{\n    if(operations === '+'){\n      setResult(parseInt(valueA) + parseInt(valueB));\n    }\n    else if(operations === '-'){\n      setResult(parseInt(valueA) - parseInt(valueB));\n    }\n    else if(operations === '*'){\n      setResult(parseInt(valueA) * parseInt(valueB));\n    }\n    else if(operations === '/'){\n      setResult(parseInt(valueA) / parseInt(valueB));\n    }\n    else\n    {\n\n      alert('enter right value');\n\n    }\n  }\n\n  const setValuehanderA =(e)=>{\n    setValueA(e.target.value);\n  }\n\n  const setValuehanderB =(e)=>{\n    setValueB(e.target.value);\n  }\n\n\n  return (\n    <div className=\"App\">\n    <h1>Simple Calculator</h1>\n      <h3>{result}</h3>\n        <div>\n        <input type=\"text\" value={valueA} onChange={setValuehanderA}/>\n        <input type=\"text\" value={valueB} onChange={setValuehanderB}/>\n        <button onClick={handleSubmit} className='operation'>Submit</button>\n        </div>\n        <span>{operations}</span>\n        <div className=\"valueoperation\">\n        <button onClick={()=>setOperations('+')}>+</button>\n        <button onClick={()=>setOperations('-')}>-</button>\n        <button onClick={()=>setOperations('*')}>*</button>\n        <button onClick={()=>setOperations('/')}>/</button>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}